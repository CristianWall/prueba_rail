#!/usr/bin/env python3
"""
Script de configuraci√≥n espec√≠fico para Railway
Maneja la instalaci√≥n y configuraci√≥n de dependencias
"""

import os
import sys
import subprocess

def install_dependencies():
    """Instalar dependencias espec√≠ficas para Railway"""
    print("üì¶ Instalando dependencias para Railway...")
    
    # Dependencias b√°sicas
    basic_deps = [
        "Flask==3.1.0",
        "gunicorn==23.0.0",
        "opencv-python-headless==4.10.0.84",
        "numpy==1.24.3",
        "Pillow==10.0.0"
    ]
    
    for dep in basic_deps:
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", dep], check=True)
            print(f"‚úÖ {dep} instalado")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error instalando {dep}: {e}")
    
    # Dependencias de YOLO (versiones ligeras)
    yolo_deps = [
        "ultralytics==8.0.196",
        "torch==2.0.1",
        "torchvision==0.15.2"
    ]
    
    for dep in yolo_deps:
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", dep], check=True)
            print(f"‚úÖ {dep} instalado")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è  {dep} no se pudo instalar: {e}")

def configure_environment():
    """Configurar variables de entorno para Railway"""
    print("üîß Configurando entorno para Railway...")
    
    # Variables de entorno para Railway
    os.environ.setdefault('FLASK_ENV', 'production')
    os.environ.setdefault('PYTHONUNBUFFERED', '1')
    os.environ.setdefault('OPENCV_VIDEOIO_PRIORITY_MSMF', '0')
    
    print("‚úÖ Variables de entorno configuradas")

def verify_setup():
    """Verificar que la configuraci√≥n est√© correcta"""
    print("üß™ Verificando configuraci√≥n...")
    
    try:
        import flask
        print("‚úÖ Flask disponible")
    except ImportError:
        print("‚ùå Flask no disponible")
        return False
    
    try:
        import cv2
        print("‚úÖ OpenCV disponible")
    except ImportError:
        print("‚ùå OpenCV no disponible")
        return False
    
    try:
        import numpy
        print("‚úÖ NumPy disponible")
    except ImportError:
        print("‚ùå NumPy no disponible")
        return False
    
    try:
        from ultralytics import YOLO
        print("‚úÖ YOLO disponible")
    except ImportError:
        print("‚ùå YOLO no disponible")
        return False
    
    print("‚úÖ Configuraci√≥n verificada")
    return True

if __name__ == "__main__":
    print("üöÄ Configurando aplicaci√≥n para Railway...")
    
    configure_environment()
    install_dependencies()
    
    if verify_setup():
        print("üéâ Configuraci√≥n completada exitosamente")
    else:
        print("‚ùå Error en la configuraci√≥n")
        sys.exit(1)
